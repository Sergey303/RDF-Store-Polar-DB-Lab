using System;
using RDFCommon;
using System.Collections.Generic;
using System.Linq;
using RDFCommon.OVns;

COMPILER RDFTurtle
 
 public string graphName;

NodeGenerator ng=new NodeGenerator();

public Action<string, string, ObjectVariants> ft;
private readonly Prologue prologue = new Prologue();

/*______________________________________________*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  letDig = letter + digit.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  string1 = ANY - "'\\". 
  string2 = ANY - "\"\\".
  stringShort1 = string1  - cr -lf.
  stringShort2 = string2  - cr -lf.
  hex = digit + "ABCDEF".
  pnbase   = letter+"\u00C0..\u00D6" +"\u00D8..\u00F6" +"\u00F8..\u02FF" +"\u0370..\u037D" +"\u037F..\u1FFF" +"\u200C..\u200D" +"\u2070..\u218F" +"\u2C00..\u2FEF" +"\u3001..\uD7FF" +"\uF900..\uFDCF" +"\uFDF0..\uFFFD" +"\u10000..\uEFFFF".
  pnu  = pnbase + "_".
  pn   = pnu + "-" + digit  + "\u00B7" + "\u0300..\u036F" + "\u203F..\u2040".
  pndot = pn + ".".
  iriChar = ANY - "<>\"{}|^`\\". /* - "\u0000..\u0019". */
  comment = ANY  - cr -lf.
  sign ="+-".
  echar = "tbnrf\"\'\\".
  localEscapeChar = "_~.-!$&|\'\"()*+,;=/?#@%".

TOKENS 
	iriref	=	'<' { iriChar} '>'.	 	
	pnamens	=	[ pnbase [ { pndot } pn] ] ':'.	
	pnameln	=	([ pnbase [ { pndot } pn] ] ':') (pnu | ':' | digit | ('%' hex hex) | '\\' localEscapeChar) [{pndot | ':' | ('%' hex hex) | '\\' localEscapeChar} (pn | ':' | ('%' hex hex) | '\\' localEscapeChar)].
	blanknodelabel	=	"_:" (pnu | digit) [({pndot} pn)].
	langtag	=	'@' letter {('-' | letDig)}.
	integer	=	[sign] digit {digit}.
	decimal	=	[sign] {digit} '.' digit {digit}.
	double	=	[sign] ((digit {digit} '.' {digit} ('e' [sign] digit {digit})) | ('.' digit {digit} ('e' [sign] digit {digit})) | (digit {digit} ('e' [sign] digit {digit}))).
	stringliteralquote	=	'\"' {stringShort2 | ('\\' echar) | ("\\u" hex hex hex hex | "\\u" hex hex hex hex hex hex hex hex) } '\"'  .
	stringliteralsinglequote	=	"\'" {stringShort1 | ('\\' echar) | ("\\u" hex hex hex hex | "\\u" hex hex hex hex hex hex hex hex)} "\'" .
	stringliterallongsinglequote	=	"\'\'\'" {["\'" | "\'\'"] (string1 | ('\\' echar) | ("\\u" hex hex hex hex | "\\u" hex hex hex hex hex hex hex hex))} "\'\'\'".
	stringliterallongquote	=	        "\"\"\"" {['\"' | "\"\""] (string2 | ('\\' echar) | ("\\u" hex hex hex hex | "\\u" hex hex hex hex hex hex hex hex))} "\"\"\"".
	anon	=	'[' ']'.	
	
/*
	esc	=	'\\' echar.
	pnprefix	=pnbase [ { pndot } pn]	.
	exponent	=	'e' [sign] digit {digit}.  	
	percent	=	percent	=	'%' hex hex.
	uchar	=	"\\u" hex hex hex hex | "\\u" hex hex hex hex hex hex hex hex.
 */
COMMENTS FROM "#" TO lf

IGNORE cr + lf + tab





PRODUCTIONS
/*____________________________________________*/
RDFTurtle                   
=  Turtledoc.
/*____________________________________________*/
	Turtledoc	=	{Statement}.
/*____________________________________________*/
	Statement	=	Directive | (Triples '.').
/*____________________________________________*/
	Directive	=	Prefixid | Base | Sparqlprefix | Sparqlbase.
/*____________________________________________*/
	Prefixid	=	"@prefix" pnamens (.string pn=t.val; .) iriref (. prologue.AddPrefix(pn, t.val.ToLower()); .) '.'.
/*____________________________________________*/
	Base	=	"@base" iriref (. prologue.SetBase(t.val.ToLower()); .) '.'.
/*____________________________________________*/
	Sparqlbase	=	"base" iriref (. prologue.SetBase(t.val); .) .
/*____________________________________________*/
	Sparqlprefix	=	"prefix" pnamens (.string pn=t.val; .) iriref (. prologue.AddPrefix(pn, t.val); .).
/*____________________________________________*/
	Triples	= (. string s; .)	((Subject<out s> Predicateobjectlist<s>) | (Blanknodepropertylist<out s> [Predicateobjectlist<s>])).
/*____________________________________________*/
	Predicateobjectlist<string s>	= (. string p; .)	(Verb<out p> Objectlist<s,p>) {';' [Verb<out p> Objectlist<s,p>]}.
/*____________________________________________*/
	Objectlist<string s, string p>	=(. ObjectVariants ov; .)	Object<out ov> (. ft(s,p,ov); .) {',' Object<out ov> (. ft(s,p,ov); .) }.
/*____________________________________________*/
	Verb<out string p>	=  (. p=null; .)	(Iri<out p> | 'a' (. p = SpecialTypesClass.RdfType; .)).
/*____________________________________________*/
	Subject <out string value>	=  (. value=null; .) (Iri <out value> | Blanknode<out value> | Collection<out value>).
   /*____________________________________________	Predicate	=	Iri. ____________________________________________*/
	Object<out ObjectVariants value>	= 		  (. value=null;  string iri; .)	
	((Iri<out iri> | Blanknode<out iri> | Collection<out iri> | Blanknodepropertylist<out iri>) (. value = new OV_iri(iri); .) 
	| 	Rdfliteral<out value> | Numericliteral<out value> | Booleanliteral<out value>).
/*____________________________________________ Literal<out value>	=	Rdfliteral | Numericliteral | Booleanliteral<out > .____________________________________________*/
	Blanknodepropertylist<out string value>	=	'[' (. value= ng.CreateBlank(); .)
													 Predicateobjectlist<value> ']'.
/*____________________________________________*/
	Collection<out string value>	=	'(' (. ObjectVariants ov; var nodes = new List<ObjectVariants>(); .) 
	{ Object<out ov> (.  nodes.Add(ov); .) } ')'
	(. var rdfFirst = SpecialTypesClass.RdfFirst;
            var rdfRest = SpecialTypesClass.RdfRest;
                string sparqlBlankNodeFirst = ng.CreateBlank();
                string sparqlBlankNodeNext = ng.CreateBlank();
            foreach (var node in nodes.Take(nodes.Count - 1))
            {
                ft(sparqlBlankNodeNext, rdfFirst, node);
                ft(sparqlBlankNodeNext, rdfRest, new OV_iri(sparqlBlankNodeNext = ng.CreateBlank()));
            }
            ft(sparqlBlankNodeNext, rdfFirst, nodes[nodes.Count - 1]);
            ft(sparqlBlankNodeNext, rdfRest, new OV_iri(SpecialTypesClass.Nil));
            value = sparqlBlankNodeFirst;
	 .).
/*____________________________________________*/
	Numericliteral <out ObjectVariants value>	= (. value=null; .)	
	(integer (. value=new OV_int(t.val); .) 
	 | decimal (. value=new OV_decimal(t.val); .) 
	 | double (. value=new OV_double(t.val); .)).
/*____________________________________________*/
	Rdfliteral<out ObjectVariants value>	= (. value=null; .)	
								(String (. string str=t.val; .) 
							[langtag  (.  value=new OV_langstring(str, t.val); .)
							| "^^" (.string literalType; .) Iri<out literalType> (. value = ng.CreateLiteralNode(str, literalType); .)
							] (. if(value==null) value=new OV_string(str); .)).
/*____________________________________________*/
	Booleanliteral<out ObjectVariants value>	= (. value=null; .)	("true" (. value = new OV_bool(true); .) | "false" (. value=new OV_bool(false); .)).
/*____________________________________________*/
	String	=	stringliteralquote | stringliteralsinglequote | stringliterallongsinglequote | stringliterallongquote.
/*____________________________________________*/
	Iri<out string value>	= (. value=null; .)
	(iriref (. value=prologue.GetFromIri(t.val.Substring(1, t.val.Length-2)); .) 
	| pnameln (. value=prologue.GetUriFromPrefixed(t.val); .) | pnamens (. value=prologue.GetUriFromPrefixedNamespace(t.val); .)).
/*____________________________________________		Prefixedname	=	pnameln | pnamens. ____________________________________________*/
	Blanknode<out string value>	=  (. value=null; .)
  (blanknodelabel  (. value=ng.CreateBlank(t.val,graphName); .)
| anon (. value=ng.CreateBlank(); .)).
/*____________________________________________*/
END RDFTurtle.
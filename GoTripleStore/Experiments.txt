
5-й тест
500 мс, 5 результатов

Убираю DISTINCT LIMIT ORDER 
478 мс., 8 результатов

Вот конкретика:
Строка (вычисление слева направо)
#	?product bsbm:productPropertyNumeric1 ?simProperty1 .
обрабатывает 1106 запросов. До нее 317 мс. вместе с ней 433-444 мс.

А еще до предыдущей 192 тика. Строка на которой тратится 120 мс.
#	dataFromProducer1:Product12 bsbm:productPropertyNumeric1 ?origProperty1 .
Замечу что строка не связана с предыдущими переменными, так что здесь и далее
много повторных вычислений.

До строки:
#	?product rdfs:label ?productLabel .
Было 68 мс. 1106 результатов. 
После 197 мс. 1106 результатов. Получается 30 мс. на 1106 поисков

Для начала, надо  убедиться, что правило
	dataFromProducer1:Product12 bsbm:productFeature ?prodFeature .
работае 31 мс. и дает 117 результатов.

obj=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/instances/productfeature142
pred=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/vocabulary/productfeature
НЕТ (не найдено RPack-машиной) субъектов с такими объектом и предикатом

Будучи запущенным для спаркл-машины, изолированный запрос:
	?product bsbm:productFeature <http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/instances/productfeature142> .
дал 24 результата, в том числе,    
dataFromProducer1:Product12
т.е. то значение, с которого началось вычисление.

Иду обратным путем. В спаркл-формулах добавляю по этапу преобразования. 
Аналог первых двух строчек дает 1123 результата за 28 мс.
Три строчки дают 1106 результатов за 28 мс.
После добавления четвертой строчки, получилось 1106 результатов за 8160 мс.
повторно 104 мс.
 

 Исправил опечатку, теперь после четвертой строки 1106 результатов за 177-184 мс.
 После добавления 5-й строки (simProperty1), получилось 1106 результатов за 1376 мс.
 повторно 260-273

 После пятой строки (1-й фильтр) получилось 66 результатов за 256-282 мс. 
 
 6-я строка: 66 - 251 мс.
 7-я строка: 66 - 252 мс.
 8-я строка: 8  - 255 мс.
 
Еще раз
стр   к-во время
1    17     5     
2  1123    28
3  1106    29
4  1106   104
5  1106   177
6  1106   252
7    66   252
8    66   249
9    66   255
10    8   255

При диагностичеком режиме, время работы Sparql-linq на заранее записанных данных составило 1 мс., 
т.е. в пределах ошибки измерения.


После оптимизаии спаркл-кода путем перенесения двух автономных операторов, получилось 177-182 мс.

Попробовал 6-й тест. Получилось 303 результата за почти 30 (!) секунд. Видимо не разогрелась БД.
повторно 220-250. Также в 2 раза быстрее, чем у Сергея. Но я там не проверял.

pred=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/vocabulary/productFeature
obj=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/instances/ProductFeature16

Новый интерпретатор
стр   к-во время
1    17    15-17     
2  1123    36-40
3  1106    37
4  1106   113-117
5  1106   179-183
6  1106   250-260
-
7    66   252
8    66   249
9    66   255
10    8   255


ВОПРОС: А для значений ObjectVariants определено равенство?
ПРОБЛЕМА: целые литералы превратилися в типизованные константы с типом http://www.w3.org/2001/XMLSchema#integer. И мешается OV_typed
По-прежнему не произведена работа по "умной" системе GetHashCode()

Два запроса, выполненных подряд: 249, 233
Через диагностическую систему: 257, 45 - накладных расходов несколько больше

Сделал пропуск 5-го теста в цикле. Получилось 100 тестов с разными начальными данными: 10 сек. на рабочем компьютере
и 23-25 сек. на домашнем. Возможно значительное количество повторов к запросам, что может делать схему кеширования
достаточно эффективной. 

Для 10 запросов, результат 1900-2400 мс.
В пятом тесте (10 прогонов) nspO=26401, nSpo=198

Пропуск этого же теста на рабочем компьютере дал 732 мс. - логично...
Закешировал spO, получилось 285 мс.
Закешировал Spo, получилось 266 мс. 
На 100 выполнениях: получило 960 мс., т.е. 9.6 мс. на выполнение запроса. 100 QpS

Счетчики: nspO=5786 nSpo=1405 (100 прогонов) 960 мс
Без кеша: nspO=253003 nSpo=2004 (100 прогонов) 8999 мс

число обращений к хранилищу уменьшилось в 44 раза.

После ночи "стояния" и исправления недоделок тестирую снова:
Без кеша: nspO=309826 nSpo=2085 (100 прогонов) 21029 мс
еще раз: ...

Да, еще сделал забытое зерно для Rnd(). Теперь результаты не будут отличаться прогон от прогона
Без кеша: nspO=294781 nSpo=2055 (100 прогонов) 10328 мс, 9833 мс., 10229 мс.
С кешем: nspO=8117 nSpo=1396 (100 прогонов) 1027 мс., 1082, 1065

Выводе не изменились, только теперь разница в коичестве доступов к хранилищу 36.3

Виртуозо на 500+500 прогонах дала 58 QpS. (вроде)
 
20150516 13:49
Сделал вроде 1-й тест. С фиксированными значениями. ПОлучается одиночным. Одиночный пропуск дает 45 мс.
При 100 пропусках, в серднем получилось около 25 мс. Много...

2-й тест:
6 строчек проходят хорошо - в одну ветвь, за 35 мс. (100 запусков)
7-я строчка (.spo(XYZ, pF, _f)) раветвляет ветвь на 24. 
По нему 100 пропусков (без кеширования) 935 мс., т.е. в среднем 9 мс. на Query.

1-й тест (параметры Лештаева):  154 мс. 100 первых испытаний 

20150522 10:43
В принципе, все идет нормально. Радует то, что моя часть программного комплекса неплохо 
запроцедурена.  

Хочу вернуться к простым тестам (люди-фотографии-отражение). И посмотреть характеристики 
разных систем на них. В качестве базовых запросов будут: 
1. Фотки персонажа
2. Фото-друзья (те, кто попал в те же фотографии)
3. См. также - фотографии тех же персонажей, что и персонажи на данной фотографии.

Сначала надо загрузить класс-генератор, может даже что-то подправить.

Сделал. Вроде работает. Загрузка 40 тыс. персон (1 млн. триплетов) произведена за 62 сек.
Интересна статистика. Для sp - это 840 тыс. (ровно!) из миллиона. Для spo 999912

Нашел ошибку в формировании данных - сущности всех (трех) классов были простыми числами,
начинающимися с нуля. Соответственно, произошло наложение. Теперь идентификатор формируется 
как имя класса с приставленным к нему номером. Расчет пошел.

Кстати, статичтика также изменилась. Теперь и sp - тоже очень насыщенный индекс, по нему:
sp_index 999976, spo_index 999892

Простейший тест - получение прямой информации о случайно сгенерированном идентификаторе 
сущности:
var qu2 = g.GetTriplesWithSubject("person" + rnd.Next(npersons - 1));

Результат: 358 мс. на 1000 запросов.    

Замена на поиск по субъекту и предикату дает 71 мс. на тысячу.

Можно еще проверки Contains() проверить

Сработало и получилось по времени приблизительно то же самое - 69 мс. на 1000

Теперь буду имитировать запрос, который я задавал таблицам: Выдать все фотографии,
на которых отражен данный персонаж.

Сделал портрет - получение множества имен фотографий, на которых изображена персона.
получилось: 150-164 мс. на 100 запросов. (600-700 QpS).

============= SQLight
Пытаюсь вопроизвести результаты тестирования, выполненного в SQLight и MySQL.
Выполнение в SQLight для 10 тыс. персон дало 133-140 мс. на 100 запросов.
Сделаю ту же базу - 40 тыс. Идентификаторы - целочисленные.
Загрузка - 15 сек. Файл базы данных: 14.4 Мб.  100 портретов 142-147 мс. 
А 400 тыс.?
Загрузка 129 сек. Файл БД 155 Мб. 100 портретов 153-161 мс.

============== MySQL
40 тыс персон. 
Загрузка 70 сек., Файлы БД 43 Мб??? 39-41 мс. за 100 портретов
400 тыс. персон
ЗАгрузка 603 сек. Файлы БД 232 Мб. Очень плохо разогревается, осталось 2400 мс. на 100
повторное выполнение 54 мс. на 100 запросов
При следующем запуске без загрузки, разогрев также не произошел!!!

============== MS SQL Server
40 тыс. персон
Загрузка 82 сек., Файл БД: 22.2 Мб. 100 портретов 253-345 мс. при повторном расчете 40 мс.
400 тыс. персон
Загрузка 568 сек., Файл БД: 199 Мб. 100 портретов 450 мс. при повторном расчете 40 мс.

============== TestPerPhoRef
40 тыс. персон
Загрузка 60 сек., Файлы БД 103 Мб., 100 портретов 182 мс.
400 тыс. персон
--
  
Рабочий компьютер
============== TestPerPhoRef
40 тыс. персон
Загрузка 28 сек., Файлы БД 103 Мб., 100 портретов 65 мс.
400 тыс. персон
Загрузка 334 сек., Файлы БД 1.02 Uб., 100 портретов 86 мс.
1 млн. персон
Загрузка 1028 сек., Файлы БД 7.59 Uб., 100 портретов 102, 93, 90 мс.

Домашний компьютер
=============== TestStandard
40 тыс персон
Загрузка 9 сек., Файлы БД 12.2 Мб., 100 портретов 33 мс. (НА ДОМАШНЕМ!!!)
400 тыс. персон
Загрузка 94 сек., Файлы БД 123 Мб., 100 портретов 51 мс.
 


___________________на другой машине________
 
 TestPerPhoRef							  
40 тыс. персон		 100 портретов 120 мс.
400 тыс. персон		 100 портретов 153 мс.
											
Sparql			   
40 тыс. персон		 100 портретов 140 мс.
400 тыс. персон		 100 портретов 160 мс.

20150524 15:38
~~~~~~~~~~~~~~Тестирование на РАБОЧЕЙ машине~~~~~~~~~~~~~~~
============= TestStandard
40 тыс персон
Загрузка 3.7 сек., Файлы БД 12.4 Мб., 100 портретов 17 мс. (НА РАБОЧЕМ!!!)
400 тыс. персон
Загрузка 50 сек., Файлы БД 123 Мб., 100 портретов 23 мс.
1 млн. персон 
Загрузка 92 сек., Файлы БД 310 Мб., 100 портретов 26 мс.
2 млн. персон 
Загрузка 184 сек., Файлы БД 623 Мб., 100 портретов 22 мс.
4 млн. персон 
Загрузка 368 сек., Файлы БД 1.21 Гб., 100 портретов 25 мс.

============= TestPerPhoRef							  
40 тыс. персон Загрузка 30 сек., Файлы 103 Мб.		 100 портретов 65-71 мс.
400 тыс. персон Загрузка 339 сек., Файлы 1.02 Гб.	 100 портретов 89, 84, 79 мс.

============= SQLite
40 тыс. персон. Загрузка 6.8 сек., Файлы 14.4 Мб.	100 портретов 55-60 мс.
400 тыс. персон. Загрузка 62 сек., Файлы 155 Мб.	100 портретов 58-64 мс.
1 млн. персон. Загрузка 158 сек., Файлы 395 Мб.		100 портретов 59-66 мс.
4 млн. персон. Загрузка 645 сек., файл 1.6 Гб.		100 портретов 59-67 мс.
10 млн. персон. Загрузка 1622 сек., файл 4.21 Гб.	100 портретов 63-70 мс.

На 400 тыс были проведены дополнительные эксперименты. После перезагрузки компьютера разогрев в 10 тыс.
запусков уменьшил время выполнения теста с 7223 мс. до 123 мс. После второй серии разогрева, появились времена тестрования 59-63 мс.
После следующей перезагрузки компьютера, было произведено "ручное" разгоревание базы данных путем копирования ее файла в другое место.
После этого, баз данных показывала предельные (на этой задаче) характеристики.  

============== MySQL
40 тыс. персон. Загрузка 21 сек., Файлы - Мб.	100 портретов 15-17 мс. (!)
400 тыс. персон. Загрузка 215 сек., Файлы 252 Мб.	100 портретов 120-133 мс. (?) (После загрузки было 226, 
потом многократным дополнительным разогревом довелось до указанного) 35 мс. - при полном повторе пути.
При повторном запуске без загрузки, разогрев начался со 157, дошел до 80-92 мс.
После перезагрузки первый "естественный" разогрев довел время до 64-91, второй несколко хуже, третий - еще хуже.
После 5-го разогрева плдучидлсб 121-134 мс. 

1 млн. персон. Загрузка - сек., Файлы 600 Мб.		100 портретов 303-316 мс.
4 млн. персон. Загрузка 2158 сек., Файлы 2.27 Гб.	100 портретов 369-400 мс.
10 млн. персон. Надо запустить ночью...

============= TestStandard (string)
40 тыс персон Загрузка 8 сек., Файлы БД 16.4 Мб., 100 портретов 17 мс. (НА РАБОЧЕМ!!!)
400 тыс. персон Загрузка 98 сек., Файлы БД 172 Мб., 100 портретов 24 мс.
1 млн. персон Загрузка 266 сек., Файлы БД 438 Мб., 100 портретов 22 мс.
4 млн. персон. Загрузка 1070 сек., Файлы БД 1.76 Гб., 100 портретов 35 мс. Без загрузки 28, 26 мс.

======== Внимание! ======= TableView.Warmup() не полностью разогревает таблицу. Возможно, не трогает какие-то индексы или шкалы.

Более точное измерение производительности - 1000 портретов
40 тыс. персон:
Standard3TabsInt 86, 91 мс.
Standard3TabsString 135 мс.
GaGraphStringBased 633, 603, 617 мс.

============ Sparql наш!
40 тыс. персон. Загрузка 90 сек. Файлы БД 103 Мб. 1000 портретов 760, 732, 736, 724 мс.
400 тыс. персон. Загрузка 1063 сек. Файлы БД 1.2 Гб. 1000 портретов 804 мс.

============ Virtuoso
40 тыс. персон. Загрузка 103 сек. Файлы БД 90 Мб. 1000 портретов 505 мс. Без загрузки 454, 444, 457
400 тыс. персон. Загрузка 1693 сек. Файлы БД 692 Мб. 1000 портретов 742 мс. Без загрузки 727, 725
800 тыс. персон. Загрузка 4315 сек. Файлы БД 1.32 Гб. 1000 портретов 869 мс. Без загрузки 865, 871 
1 млн. персон. Загрузка 5865 сек. Файлы БД 1.32 Гб. 1000 портретов 970 мс. Без загрузки 965, 959

=========== Посмотрю из каких частей складываются 600 мс. GaGraphStringBased
40 тыс. Загрузка 29 сек. Файлы БД 103 Мб. 1000 порт. 612. Без загрузки 631, 612, 612
Без получения name и Deref 448, 454 мс.
Без {} 406
 243, 235, 237 
 207, 245, 205

 Итак, получение множества отношений по заданному предикату и значению reflected 207
 Dereference +28 (235)
 Множество триплетов по субъекту и предикату +165 (400) 
 Dereference +14 (414)
 Множество триплетов по субъекту и предикату +185 (600)
 Dereference + 30 (630)

 Вывод: времена распределяются равномерно и обосновано. Серьезных возможностей ускорить выполнение такого запроса 
 не видно. 

 20150529 13:29
 Я все думаю о разнице результатов между "табличными" решениями и "триплетными". 

 Я сейчас на домашнем компьютере. Попробую сопоставить два вида вычисления. 

 Сначала триплетный вариант GaGrapgStringBased (программа в TestPerPhoRef)

 Зафиксируем ряд результатов: Все вычисления по 1000, времена в мс.
 sPO - 370, 382, 381
 spO - 71, 74, 73
 spo - 68, 71, 70
 Por - 1521, 1558, 1511

 Теперь попробую лучший вариант Standard3TabsInt

 persons - 59, 58, 79, 65
 docs - 44, 47, 47, 45
 Por - 206, 217, 262, 210

 Теперь разобъю на части расчет портрета
             var query = index_reflected.GetAllByKey(code) // 43 мс
                .Select(ent => ((object[])ent.Get())[1])   // +26 (69)
                .Select(re => (int)((object[])re)[2])      // + 9 (78)
                .Select(c => this.GetPhoto_docByCode(c))   // +137 (215)
                ;

 Теперь попробую сравнение с Standard3TabsString

 persons - 81, 85, 100, 90
 docs - 67, 66, 64, 69
 Por - 399, 357, 327, 363

 Итак, лучший вариант в 7 раз быстрее, строковый - в 4 раза быстрее триплетного
 Между собой они отличаются чуть больше, чем в полтора раза...
 
 Теперь еще раз посмотрю на триплетный вариант. Еще раз отпрофилирую главную
 процедуру формирования портрета
        var qu3 = g.GetTriplesWithPredicateObject("reflected",
            new OV_iri("person" + rnd.Next(npersons - 1)))                  // +520 (520)
            .Select(ent => (string)((object[])g.Dereference(ent))[0])       // +43 (581)
            .SelectMany(s => g.GetTriplesWithSubjectPredicate(s, "in_doc")) // +401 (982)
            .Select(en =>
            {
                var tri_o = g.Dereference(en);
                var o = tri_o[2].ToOVariant();
                return ((OV_iri)o).Name;
            })                                                              // +51 (1033)
            .SelectMany(s => g.GetTriplesWithSubjectPredicate(s, "name"))   // +388 (1421)
            .Select(en => g.Dereference(en))                                // +62 (1483)
            ;

20150609 08:10
Перепропуск старых тестов дал неожиданное отклонение. Было:
Standard3TabsInt 86, 91 мс.
Standard3TabsString 135 мс.
Стало для 10 тыс.:
Standard3TabsInt 917 мс.
Standard3TabsString 1700 мс.

хотя первый результат похож...

Первая часть преображвания 
index_reflected.GetAllByKey(code)
выполнялась 165 мс. (10000 кодов)

Профилирование:
var query = index_reflected.GetAllByKey(code) //165
    .Select(ent => ((object[])ent.Get())[1]) //269
    .Select(re => (int)((object[])re)[2]) //294
    .Select(c => this.GetPhoto_docByCode(c)) //861
 
НА РАБОЧЕМ КОМПЬЮТЕРЕ

Standard3TabsInt:
10K persons 199 ms
10K photo_docs 178 ms
10K portraits 867 ms

TripleSetInt
10K person names 605, 677 ms
10K portraits 4669, 4665 ms

- в 4-5 раз медленнее...

20150611 15:40 Рабочий компьютер
Пропускаю последний тест на рабочем компьютере.

Получчилось: загрузка 9142, 10 тыс. имен персон 475 мс., 10 тыс портретов 4452 мс. 

============ TripleSetInt
40 тыс. персон. Загрузка 15 сек. Файлы БД 60,3 Мб. 1000 портретов 445 мс.
400 тыс. персон. Загрузка 208 сек. Файлы БД 608 Мб. 1000 портретов 436 мс. Без загрузки 423, 431
1 млн. персон. Загрузка 590 сек. Файлы БД 1.48 Гб. 1000 портретов 422 мс. Без загрузки 
4 млн. персон. Загрузка 3694 сек., Файлы БД 6.73 Гб. 1000 портретов 435 мс. 
10 млн. персон. Загрузка 3 часа 44 мин. Файлы БД 15 Гб. 1000 портретов 74 сек. (плохо разогрелось)
10 млн. SSD. 1000 портретов 724 мс. повторно 592, 505, 477 мс.

Я не совсем то решение тестировал, так что частично повторю измерения

============ TripleSetInt
40 тыс. персон. Загрузка 15 сек. Файлы БД 60,3 Мб. 1000 портретов 380 мс.
400 тыс. персон. Загрузка 208 сек. Файлы БД 608 Мб. 1000 портретов 396 мс. Без загрузки 390, 386
1 млн. персон. Загрузка 590 сек. Файлы БД 1.48 Гб. 1000 портретов 390 мс. Без загрузки 385, 390
4 млн. персон. Загрузка 3694 сек., Файлы БД 6.73 Гб. 1000 портретов 411 мс. Без загрузки 422, 426 (65 сек. разогрев) 



  

5-й тест
500 мс, 5 результатов

Убираю DISTINCT LIMIT ORDER 
478 мс., 8 результатов

Вот конкретика:
Строка (вычисление слева направо)
#	?product bsbm:productPropertyNumeric1 ?simProperty1 .
обрабатывает 1106 запросов. До нее 317 мс. вместе с ней 433-444 мс.

А еще до предыдущей 192 тика. Строка на которой тратится 120 мс.
#	dataFromProducer1:Product12 bsbm:productPropertyNumeric1 ?origProperty1 .
Замечу что строка не связана с предыдущими переменными, так что здесь и далее
много повторных вычислений.

До строки:
#	?product rdfs:label ?productLabel .
Было 68 мс. 1106 результатов. 
После 197 мс. 1106 результатов. Получается 30 мс. на 1106 поисков

Для начала, надо  убедиться, что правило
	dataFromProducer1:Product12 bsbm:productFeature ?prodFeature .
работае 31 мс. и дает 117 результатов.

obj=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/instances/productfeature142
pred=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/vocabulary/productfeature
НЕТ (не найдено RPack-машиной) субъектов с такими объектом и предикатом

Будучи запущенным для спаркл-машины, изолированный запрос:
	?product bsbm:productFeature <http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/instances/productfeature142> .
дал 24 результата, в том числе,    
dataFromProducer1:Product12
т.е. то значение, с которого началось вычисление.

Иду обратным путем. В спаркл-формулах добавляю по этапу преобразования. 
Аналог первых двух строчек дает 1123 результата за 28 мс.
Три строчки дают 1106 результатов за 28 мс.
После добавления четвертой строчки, получилось 1106 результатов за 8160 мс.
повторно 104 мс.
 

 Исправил опечатку, теперь после четвертой строки 1106 результатов за 177-184 мс.
 После добавления 5-й строки (simProperty1), получилось 1106 результатов за 1376 мс.
 повторно 260-273

 После пятой строки (1-й фильтр) получилось 66 результатов за 256-282 мс. 
 
 6-я строка: 66 - 251 мс.
 7-я строка: 66 - 252 мс.
 8-я строка: 8  - 255 мс.
 
Еще раз
стр   к-во время
1    17     5     
2  1123    28
3  1106    29
4  1106   104
5  1106   177
6  1106   252
7    66   252
8    66   249
9    66   255
10    8   255

При диагностичеком режиме, время работы Sparql-linq на заранее записанных данных составило 1 мс., 
т.е. в пределах ошибки измерения.


После оптимизаии спаркл-кода путем перенесения двух автономных операторов, получилось 177-182 мс.

Попробовал 6-й тест. Получилось 303 результата за почти 30 (!) секунд. Видимо не разогрелась БД.
повторно 220-250. Также в 2 раза быстрее, чем у Сергея. Но я там не проверял.

pred=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/vocabulary/productFeature
obj=http://www4.wiwiss.fu-berlin.de/bizer/bsbm/v01/instances/ProductFeature16

Новый интерпретатор
стр   к-во время
1    17    15-17     
2  1123    36-40
3  1106    37
4  1106   113-117
5  1106   179-183
6  1106   250-260
-
7    66   252
8    66   249
9    66   255
10    8   255


ВОПРОС: А для значений ObjectVariants определено равенство?
ПРОБЛЕМА: целые литералы превратилися в типизованные константы с типом http://www.w3.org/2001/XMLSchema#integer. И мешается OV_typed
По-прежнему не произведена работа по "умной" системе GetHashCode()

Два запроса, выполненных подряд: 249, 233
Через диагностическую систему: 257, 45 - накладных расходов несколько больше

Сделал пропуск 5-го теста в цикле. Получилось 100 тестов с разными начальными данными: 10 сек. на рабочем компьютере
и 23-25 сек. на домашнем. Возможно значительное количество повторов к запросам, что может делать схему кеширования
достаточно эффективной. 

Для 10 запросов, результат 1900-2400 мс.
В пятом тесте (10 прогонов) nspO=26401, nSpo=198

Пропуск этого же теста на рабочем компьютере дал 732 мс. - логично...
Закешировал spO, получилось 285 мс.
Закешировал Spo, получилось 266 мс. 
На 100 выполнениях: получило 960 мс., т.е. 9.6 мс. на выполнение запроса. 100 QpS

Счетчики: nspO=5786 nSpo=1405 (100 прогонов) 960 мс
Без кеша: nspO=253003 nSpo=2004 (100 прогонов) 8999 мс

число обращений к хранилищу уменьшилось в 44 раза.

После ночи "стояния" и исправления недоделок тестирую снова:
Без кеша: nspO=309826 nSpo=2085 (100 прогонов) 21029 мс
еще раз: ...

Да, еще сделал забытое зерно для Rnd(). Теперь результаты не будут отличаться прогон от прогона
Без кеша: nspO=294781 nSpo=2055 (100 прогонов) 10328 мс, 9833 мс., 10229 мс.
С кешем: nspO=8117 nSpo=1396 (100 прогонов) 1027 мс., 1082, 1065

Выводе не изменились, только теперь разница в коичестве доступов к хранилищу 36.3

Виртуозо на 500+500 прогонах дала 58 QpS. (вроде)
 
20150516 13:49
Сделал вроде 1-й тест. С фиксированными значениями. ПОлучается одиночным. Одиночный пропуск дает 45 мс.
При 100 пропусках, в серднем получилось около 25 мс. Много...

2-й тест:
6 строчек проходят хорошо - в одну ветвь, за 35 мс. (100 запусков)
7-я строчка (.spo(XYZ, pF, _f)) раветвляет ветвь на 24. 
По нему 100 пропусков (без кеширования) 935 мс., т.е. в среднем 9 мс. на Query.

1-й тест (параметры Лештаева):  154 мс. 100 первых испытаний 




    